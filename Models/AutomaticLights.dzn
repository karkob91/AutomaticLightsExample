interface ILightShifter {
    in void Toogle();

    behavior {
        on Toogle: {}
    }

}

interface IHighBeamsRelay {
    in void TurnOn();
    in void TurnOff();
    

    behavior {
        bool isTurnedOn = false;

        [isTurnedOn] {
            
            on TurnOff: {
                isTurnedOn = false;
            }
        }
        [!isTurnedOn] {
            on TurnOn: {
                isTurnedOn = true;
            }
            
        }
    }

}

interface ILightSensor {
    out void LowLight();
    out void HighLight();
    enum State {Low, High};

    behavior {
        State state = State.High;
        [state.High] {
            on inevitable: {
                state = State.Low;
                LowLight;
            }
        }
        [state.Low] {
            on inevitable: {
                state = State.High;
                HighLight;
            }
        }
    }
}

interface IFrontCamera {
    out void CarDetected();
    out void CarPassed();
    enum State {Detected, NotDetected};

    behavior {
        State state = State.NotDetected;

        [state.NotDetected] {
            on inevitable: {
                state = State.Detected;
                CarDetected;
            }
        }
        [state.Detected] {
            on inevitable: {
                state = State.NotDetected;
                CarPassed;
            }
        }
    }
}

// Special interface that is triggered every time
// to check if requirements conditions are met
interface Req1 {
    in void Req1();
    behavior {
        on Req1: {}
    }
}




component ModeSelector {
    provides ILightShifter lightShifter;
    requires IHighBeamsRelay beamsRelay;
    requires ILightSensor lightSensor;
    requires IFrontCamera frontCamera;
    provides Req1 req1;

    behavior {
        //Requirement 1: If system is in the automatic mode and car is detected 
        //               in front, high beams should always be turned off 
        
        enum ControlMode {Automatic, Manual};
        ControlMode mode = ControlMode.Manual;

        void ToggleLights() {
            if(beamsRelay.isTurnedOn)
                beamsRelay.TurnOff();
            else {
                beamsRelay.TurnOn();
            }
        }

        on req1.Req1(): {
            if (mode.Automatic && frontCamera.state.Detected && beamsRelay.isTurnedOn) {
                illegal;
            }
  
        }


        // [beamsRelay.isTurnedOn] {
        [mode.Manual] {
            on lightShifter.Toogle(): {
                ToggleLights();
            }
            on lightSensor.HighLight(): {}
            on lightSensor.LowLight(): {
                if(!beamsRelay.isTurnedOn) {
                    if(frontCamera.state.NotDetected) {
                        beamsRelay.TurnOn();
                    }
                    
                    mode = ControlMode.Automatic;
                }
            }
            on frontCamera.CarDetected(), frontCamera.CarPassed(): {}
        }
        [mode.Automatic] {
            on lightShifter.Toogle(): {
                ToggleLights();
                mode = ControlMode.Manual;
            }
            on lightSensor.LowLight(): {
                if(!beamsRelay.isTurnedOn && frontCamera.state.NotDetected) 
                    beamsRelay.TurnOn();
            }
            on lightSensor.HighLight(): {
                if(beamsRelay.isTurnedOn) 
                    beamsRelay.TurnOff();
            }

            on frontCamera.CarPassed(): {
                if(!beamsRelay.isTurnedOn) 
                    beamsRelay.TurnOn();
            }
            on frontCamera.CarDetected(): {
                if(beamsRelay.isTurnedOn) 
                    beamsRelay.TurnOff();
            }
        }

        
    }

}